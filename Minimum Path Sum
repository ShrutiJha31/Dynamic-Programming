class Solution {
public:
    // int solve(int dp[][],vector<vector<int>>& g,int n, int m,int x, int y)
    // {
    //     if(x<0||y<0)
    //         return 0;
    //     if(dp[x][y]!=1000000)
    //         return dp[x][y];
    //     if(y-1>=0)
    //         dp[x][y]=solve(dp,g,n,m,x,y-1)+g[x][y];
    //     if(x-1>=0)
    //           dp[x][y]=min(dp[x][y],solve(dp,g,n,m,x-1,y)+g[x][y]);
    //     return dp[x][y];
    // }
    int minPathSum(vector<vector<int>>& g) {
        int n=g.size();
        int m=g[0].size();
        int dp[n+1][m+1];
        if(n==1&&m==1)
            return g[0][0];
        // else if(n==1)
        //     return g[0][0]+g[0][1];
        // else if(m==1)
        //     return g[0][0]+g[1][0];
        // sizeof(dp,1000000,sizeof(dp));
        // dp[0][0]=g[0][0];
        // if(m>1)
        // dp[0][1]=g[0][1]+dp[0][0];
        // if(n>1)
        // dp[1][0]=g[1][0]+dp[0][0];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i==0&&j==0)
                  dp[0][0]=g[0][0];
                else if(i==0)
                    dp[i][j]=dp[i][j-1]+g[i][j];
                else if(j==0)
                    dp[i][j]=dp[i-1][j]+g[i][j];
                else
                {
                    dp[i][j]=min(dp[i-1][j],dp[i][j-1])+g[i][j];
                }
            }
            
        }
        return dp[n-1][m-1];
    }
};
